{"ast":null,"code":"var _jsxFileName = \"/home/blue/Desktop/Projects/line-clothing/client/src/components/sign-in/sign-in.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport CustomButton from '../custom-button/custom-button.jsx';\nimport FormInput from '../form-input/form-input.jsx';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions.js';\nimport { SignInContainer, TitleContainer, ButtonsContainer } from './sign-in.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SignIn = ({\n  emailSignInStart,\n  googleSignInStart\n}) => {\n  _s();\n\n  const [userCredentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  });\n  const {\n    email,\n    password\n  } = userCredentials;\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    emailSignInStart(email, password);\n  };\n\n  const handlechange = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    setCredentials({ ...userCredentials,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(SignInContainer, {\n    children: [/*#__PURE__*/_jsxDEV(TitleContainer, {\n      children: \"Already have an account?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Sign in with your email and password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        handlechange: handlechange,\n        name: \"email\",\n        type: \"email\",\n        required: true,\n        value: email,\n        label: \"Email \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        handlechange: handlechange,\n        name: \"password\",\n        type: \"password\",\n        required: true,\n        value: password,\n        label: \"Password \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ButtonsContainer, {\n        children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"submit\",\n          children: \"Sign in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"button\",\n          onClick: googleSignInStart,\n          isGoogleSignIn: true,\n          children: \"Sign in with Google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SignIn, \"AIm0yMbsgpzML9yTEOo8lo4jacI=\");\n\n_c = SignIn;\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);\n\nvar _c;\n\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"sources":["/home/blue/Desktop/Projects/line-clothing/client/src/components/sign-in/sign-in.jsx"],"names":["React","useState","connect","CustomButton","FormInput","googleSignInStart","emailSignInStart","SignInContainer","TitleContainer","ButtonsContainer","SignIn","userCredentials","setCredentials","email","password","handleSubmit","e","preventDefault","handlechange","value","name","target","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AAEA,SAASC,iBAAT,EAA2BC,gBAA3B,QAAmD,kCAAnD;AAEA,SAAQC,eAAR,EAAwBC,cAAxB,EAAuCC,gBAAvC,QAA8D,kBAA9D;;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAACJ,EAAAA,gBAAD;AAAkBD,EAAAA;AAAlB,CAAD,KAA0C;AAAA;;AACrD,QAAM,CAACM,eAAD,EAAiBC,cAAjB,IAAmCX,QAAQ,CAAC;AAACY,IAAAA,KAAK,EAAC,EAAP;AAAUC,IAAAA,QAAQ,EAAC;AAAnB,GAAD,CAAjD;AACA,QAAM;AAACD,IAAAA,KAAD;AAAOC,IAAAA;AAAP,MAAmBH,eAAzB;;AAEA,QAAMI,YAAY,GAAG,MAAMC,CAAN,IAAW;AAC5BA,IAAAA,CAAC,CAACC,cAAF;AACAX,IAAAA,gBAAgB,CAACO,KAAD,EAAOC,QAAP,CAAhB;AACH,GAHD;;AAKA,QAAMI,YAAY,GAAGF,CAAC,IAAI;AACtB,UAAM;AAACG,MAAAA,KAAD;AAAOC,MAAAA;AAAP,QAAeJ,CAAC,CAACK,MAAvB;AAEAT,IAAAA,cAAc,CAAC,EAAC,GAAGD,eAAJ;AAAoB,OAACS,IAAD,GAAOD;AAA3B,KAAD,CAAd;AACH,GAJD;;AAMA,sBACI,QAAC,eAAD;AAAA,4BACI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAM,MAAA,QAAQ,EAAEJ,YAAhB;AAAA,8BACI,QAAC,SAAD;AACA,QAAA,YAAY,EAAEG,YADd;AAEA,QAAA,IAAI,EAAC,OAFL;AAGA,QAAA,IAAI,EAAC,OAHL;AAIA,QAAA,QAAQ,MAJR;AAKA,QAAA,KAAK,EAAEL,KALP;AAMA,QAAA,KAAK,EAAC;AANN;AAAA;AAAA;AAAA;AAAA,cADJ,eASI,QAAC,SAAD;AACA,QAAA,YAAY,EAAEK,YADd;AAEA,QAAA,IAAI,EAAC,UAFL;AAGA,QAAA,IAAI,EAAC,UAHL;AAIA,QAAA,QAAQ,MAJR;AAKA,QAAA,KAAK,EAAEJ,QALP;AAMA,QAAA,KAAK,EAAC;AANN;AAAA;AAAA;AAAA;AAAA,cATJ,eAiBI,QAAC,gBAAD;AAAA,gCACI,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC,QAAnB;AAA4B,UAAA,OAAO,EAAET,iBAArC;AAAwD,UAAA,cAAc,MAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA8BH,CA7CD;;GAAMK,M;;KAAAA,M;;AAgDN,MAAMY,kBAAkB,GAAIC,QAAD,KAAe;AACtClB,EAAAA,iBAAiB,EAAG,MAAMkB,QAAQ,CAAClB,iBAAiB,EAAlB,CADI;AAEtCC,EAAAA,gBAAgB,EAAE,CAACO,KAAD,EAAOC,QAAP,KAAoBS,QAAQ,CAACjB,gBAAgB,CAAC;AAACO,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAAD,CAAjB;AAFR,CAAf,CAA3B;;AAKA,eAAeZ,OAAO,CAAC,IAAD,EAAMoB,kBAAN,CAAP,CAAiCZ,MAAjC,CAAf","sourcesContent":["import React,{useState} from 'react';\nimport { connect } from 'react-redux';\n\nimport CustomButton from '../custom-button/custom-button.jsx';\nimport FormInput from '../form-input/form-input.jsx';\n\nimport { googleSignInStart,emailSignInStart } from '../../redux/user/user.actions.js';\n\nimport {SignInContainer,TitleContainer,ButtonsContainer} from './sign-in.styles';\n\nconst SignIn = ({emailSignInStart,googleSignInStart}) => {\n    const [userCredentials,setCredentials] = useState({email:'',password:''});\n    const {email,password} = userCredentials;\n\n    const handleSubmit = async e => {\n        e.preventDefault();\n        emailSignInStart(email,password);\n    }\n\n    const handlechange = e => {\n        const {value,name} = e.target;\n\n        setCredentials({...userCredentials,[name]:value});\n    }\n\n    return (\n        <SignInContainer>\n            <TitleContainer>Already have an account?</TitleContainer>\n            <span>Sign in with your email and password</span>\n            <form onSubmit={handleSubmit}>\n                <FormInput\n                handlechange={handlechange}\n                name='email'\n                type='email'\n                required\n                value={email}\n                label='Email '\n                />\n                <FormInput\n                handlechange={handlechange}\n                name='password'\n                type='password'\n                required\n                value={password}\n                label='Password '\n                />\n                <ButtonsContainer>\n                    <CustomButton type='submit'>Sign in</CustomButton>\n                    <CustomButton type='button' onClick={googleSignInStart} isGoogleSignIn>\n                    Sign in with Google\n                    </CustomButton>\n                </ButtonsContainer>\n            </form>\n        </SignInContainer>\n    );\n}\n\n\nconst mapDispatchToProps = (dispatch) => ({\n    googleSignInStart : () => dispatch(googleSignInStart()),\n    emailSignInStart: (email,password) => dispatch(emailSignInStart({email,password}))\n});\n\nexport default connect(null,mapDispatchToProps)(SignIn);\n"]},"metadata":{},"sourceType":"module"}